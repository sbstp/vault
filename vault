#!/usr/bin/env python3

import getpass
import grp
import inspect
import json
import os
import pwd
import sys
import tarfile
from collections import OrderedDict
from inspect import Parameter


def printf(fmt, *args, **kwargs):
    sys.stdout.write(fmt.format(*args, **kwargs))


def first_existing_parent(file):
    cur_path = os.path.dirname(file)
    while not os.path.exists(cur_path):
        cur_path = os.path.dirname(cur_path)
    return cur_path


def makedirs(fullpath, uid, gid):
    if not os.path.exists(fullpath):
        parent, _ = os.path.split(fullpath)
        makedirs(parent, uid, gid)
        os.mkdir(fullpath)
        os.chown(fullpath, uid, gid)


def can_read(file):
    return os.access(file, os.R_OK)


def can_write(file, is_dir=False):
    if os.path.exists(file):
        if is_dir:
            return os.access(file, os.W_OK | os.X_OK)
        else:
            return os.access(file, os.W_OK)
    else:
        parent = first_existing_parent(file)
        return os.access(parent, os.W_OK | os.X_OK)


def print_table(rows, *, border=2, indent=2):
    cols = len(rows[0])
    length = [0] * (cols)
    for i in range(cols):
        length[i] = max(len(row[i]) for row in rows) + border
    for row in rows:
        printf(" " * indent)
        for i in range(cols):
            printf(row[i].ljust(length[i]))
        printf("\n")


def unix_get_user(mem):
    try:
        return pwd.getpwuid(mem.uid).pw_name
    except KeyError:
        return str(mem.uid)


def unix_get_group(mem):
    try:
        return grp.getgrgid(mem.gid).gr_name
    except KeyError:
        return str(mem.gid)


class Registry:

    def __init__(self, user=None):
        if user is None:
            user = os.environ.get("SUDO_USER", None)
            if user is None:
                user = getpass.getuser()

        self._vault_path = os.path.expanduser("~{}/.vault".format(user))

        if os.path.exists(self._vault_path):
            with open(self._vault_path) as f:
                self.paths = json.load(f)
        else:
            self.paths = []

    def add_path(self, new_path):
        idx = 0
        while idx < len(self.paths):
            if new_path == self.paths[idx]:
                return
            if new_path < self.paths[idx]:
                self.paths.insert(idx, new_path)
                return
            idx += 1
        self.paths.append(new_path)

    def rm_path(self, rm_path):
        try:
            self.paths.remove(rm_path)
        except ValueError:
            pass

    def save(self):
        with open(self._vault_path, 'w') as f:
            json.dump(self.paths, f)

    def backup_to(self, archive):
        for item in self.paths:
            if not can_read(item):
                raise PermissionError(item)

        with tarfile.open(archive, "w:gz") as tar:
            for item in self.paths:
                printf("Backed up {}\n", item)
                tar.add(item)

    def restore_from(self, archive):
        with tarfile.open(archive, "r:*") as tar:
            for mem in tar.getmembers():
                file = os.path.join("/", mem.name)
                if not can_write(file, mem.isdir()):
                    raise PermissionError(file)

            for mem in tar.getmembers():
                file = os.path.join("/", mem.name)
                # create any missing directory with the file's owner and group
                makedirs(os.path.dirname(file), mem.uid, mem.gid)
                tar.extract(mem, "/")
                self.add_path(file)
                printf("Restored {}\n", file)


class Command:

    def __init__(self, name, func, help, arguments, options):
        self.name = name
        self.func = func
        self.short_help = help.splitlines()[0]
        self.help = help
        self.arguments = arguments
        self.options = options
        self.args_help = " ".join(arguments)


class Commands:

    def __init__(self):
        self._commands = OrderedDict()
        self._options = OrderedDict()

    def add(self, name, func):
        help = inspect.getdoc(func)
        spec = inspect.signature(func)
        arguments = []
        options = []

        for param in spec.parameters.values():
            if param.kind == Parameter.POSITIONAL_OR_KEYWORD:
                if param.default is None:
                    arguments.append("[<{}>]".format(param.name))
                else:
                    arguments.append("<{}>".format(param.name))
            elif param.kind == Parameter.VAR_POSITIONAL:
                arguments.append("<{}> [<{}> ...]".format(param.name, param.name))
            elif param.kind == Parameter.KEYWORD_ONLY:
                if param.default != Parameter.empty:
                    options.append("--{}={}".format(param.name, param.default))
                else:
                    options.append("--{}", param.name)

        self._commands[name] = Command(name, func, help, arguments, options)

    def option(self, name, help, arg_help=None):
        self._options[name] = (help, arg_help)

    def print_help(self, unknown=None):
        if unknown is not None:
            printf("Unknown command '{}'\n\n", unknown)
        printf("Usage: vault <command>\n\n")
        printf("Commands:\n")

        rows = [(c.name, c.args_help, c.short_help) for c in self._commands.values()]
        print_table(rows)

        if len(self._options) > 0:
            printf("\nOptions:\n")
            rows = []
            for (opt, (help, arg_help)) in self._options.items():
                if arg_help:
                    left = "--{}={}".format(opt, arg_help)
                else:
                    left = "--{}".format(opt)

                rows.append((left, help))
            print_table(rows)
            printf("\n")

    def _mk_cmd_help(self):
        def cmd_help(command=None):
            """
            Display help about a command.
            """
            try:
                cmd = self._commands[command]
            except KeyError:
                self.print_help(unknown=command)
            else:
                printf("Usage: vault {} {}\n\n", cmd.name, cmd.args_help)
                printf(cmd.help)
                printf("\n\n")
        return cmd_help

    def parse_args(self, args):
        arguments = []
        options = {}

        for arg in args:
            if arg.startswith("--"):
                idx = arg.find("=")
                if idx == -1:
                    options[arg[2:]] = True
                else:
                    options[arg[2:idx]] = arg[idx+1:]
            else:
                arguments.append(arg)

        self.arguments = arguments
        self.options = options

    def dispatch(self):
        if "help" not in self._commands:
            self.add("help", self._mk_cmd_help())

        if len(self.arguments) == 0:
            self.print_help()
            return

        cmd_name = self.arguments[0]
        rest = self.arguments[1:]

        cmd = self._commands.get(cmd_name, None)
        if cmd is None:
            self.print_help(unknown=cmd_name)
        else:
            num_arg_req = 0
            opts = {}  # options sent to the func
            valid_opts = set(self._options.keys())  # valid options, global options + func options
            spec = inspect.signature(cmd.func)

            # analyze the function's parameters for argument/option information
            for param in spec.parameters.values():
                if param.kind == Parameter.VAR_POSITIONAL and param.default is not None:
                    num_arg_req += 1
                elif param.kind == Parameter.KEYWORD_ONLY:
                    if param.name in self.options:
                        valid_opts.add(param.name)
                        opts[param.name] = self.options[param.name]

            # find if any provided option is unknown
            unknown_opts = set()
            for opt_name in self.options.keys():
                if opt_name not in valid_opts:
                    unknown_opts.add(opt_name)

            if len(unknown_opts) > 0:
                for opt_name in unknown_opts:
                    printf("Unknown option '--{}'.\n", opt_name)
            elif len(rest) < num_arg_req:
                printf("Invalid argument(s) for command '{}'\n", cmd_name)
            else:
                cmd.func(*rest, **opts)


if __name__ == '__main__':
    commands = Commands()
    commands.parse_args(sys.argv[1:])

    reg = Registry(commands.options.get("user", None))

    def cmd_add(*path):
        """
        Add files to the index.
        """
        for new_path in path:
            new_path = os.path.abspath(new_path)
            reg.add_path(new_path)

    def cmd_rm(*path):
        """
        Remove files from the index.
        """
        for rm_path in path:
            rm_path = os.path.abspath(rm_path)
            reg.rm_path(rm_path)

    def cmd_ls():
        """
        List files in the index.
        """
        for item in reg.paths:
            printf("{}\n", item)

    def cmd_backup(archive):
        """
        Backup files to an archive.
        """
        archive = os.path.abspath(archive)
        try:
            reg.backup_to(archive)
        except PermissionError as err:
            printf("Cannot read from {}, backup aborting.\n", err.args[0])

    def cmd_restore(archive):
        """
        Restores files from an archive.
        """
        archive = os.path.abspath(archive)
        try:
            reg.restore_from(archive)
        except PermissionError as err:
            printf("Cannot write to {}, restore aborting.\n", err.args[0])

    def cmd_inspect(archive):
        """
        List files, owner and mode information for an archive.
        """
        with tarfile.open(archive, "r:*") as tar:
            rows = []
            rows.append(("Kind", "User", "Group", "Mode", "Path"))
            for mem in tar.getmembers():
                kind = '-'
                if mem.isdir():
                    kind = 'd'
                elif mem.issym():
                    kind = 'l'
                abs_path = os.path.join("/", mem.name)
                rows.append((kind, unix_get_user(mem), unix_get_group(mem), '{:o}'.format(mem.mode), abs_path))
            print_table(rows, indent=0)

    def cmd_extract(archive, dir):
        """
        Extract the contents of the archive to a directory.
        """
        target = os.path.abspath(dir)
        if not can_write(target, True):
            printf("Cannot write to {}, extract aborting.\n", target)
        else:
            with tarfile.open(archive, "r:*") as tar:
                tar.extractall(path=target)

    commands.add("add", cmd_add)
    commands.add("rm", cmd_rm)
    commands.add("ls", cmd_ls)
    commands.add("backup", cmd_backup)
    commands.add("restore", cmd_restore)
    commands.add("inspect", cmd_inspect)
    commands.add("extract", cmd_extract)
    commands.option("user", "Use this user's vault", "USERNAME")
    commands.dispatch()

    reg.save()
